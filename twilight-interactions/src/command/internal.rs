//! Internal types used by command traits.
//!
//! This module contains types used by trait definitions in the [`command`]
//! module and implementations generated by the derive macros.
//!
//! [`command`]: crate::command

use std::collections::HashMap;

use twilight_model::{
    application::command::{
        BaseCommandOptionData, ChannelCommandOptionData, ChoiceCommandOptionData,
        CommandOptionChoice, CommandOptionValue, NumberCommandOptionData,
    },
    channel::ChannelType,
};

/// Convert a type to [`HashMap<String, String>`].
///
/// This method is used for the `name_localizations` and
/// `description_localizations` fields in macros implementations.
pub fn convert_localizations<I, K, V>(item: I) -> HashMap<String, String>
where
    I: IntoIterator<Item = (K, V)>,
    K: ToString,
    V: ToString,
{
    item.into_iter()
        .map(|(k, v)| (k.to_string(), v.to_string()))
        .collect()
}

/// Data to create a command option from.
///
/// This type is used in the [`CreateOption`] trait.
///
/// [`CreateOption`]: super::CreateOption
#[derive(Debug, Clone, PartialEq)]
pub struct CreateOptionData {
    /// Name of the option. It must be 32 characters or less.
    pub name: String,
    /// Localization dictionary for the option name. Keys must be valid locales.
    pub name_localizations: Option<HashMap<String, String>>,
    /// Description of the option. It must be 100 characters or less.
    pub description: String,
    /// Localization dictionary for the option description. Keys must be valid
    /// locales.
    pub description_localizations: Option<HashMap<String, String>>,
    /// Optional help. Must not be empty.
    pub help: Option<String>,
    /// Whether the option is required to be completed by a user.
    pub required: bool,
    /// Whether the command supports autocomplete. Only for `STRING`, `INTEGER`
    /// and `NUMBER` option types.
    pub autocomplete: bool,
    /// Data of the command option.
    pub data: CommandOptionData,
}

/// Data of a command option.
///
/// This type holds settings of a command option used when
/// parsing the option. It is used in the [`CommandOption`]
/// trait.
///
/// [`CommandOption`]: super::CommandOption
#[derive(Debug, Clone, Default, PartialEq)]
pub struct CommandOptionData {
    /// Restricts the channel choice to specific types. Only for `CHANNEL`
    /// option type.
    pub channel_types: Vec<ChannelType>,
    /// Maximum value permitted. Only for `INTEGER` and `NUMBER` option types.
    pub max_value: Option<CommandOptionValue>,
    /// Minimum value permitted. Only for `INTEGER` and `NUMBER` option types.
    pub min_value: Option<CommandOptionValue>,
    /// Minimum value length. Only for `STRING` option type.
    pub max_length: Option<u16>,
    /// Maximum value length. Only for `STRING` option type.
    pub min_length: Option<u16>,
}

impl CreateOptionData {
    /// Conversion into a [`BaseCommandOptionData`]
    pub fn into_data(self) -> (BaseCommandOptionData, Option<String>) {
        (
            BaseCommandOptionData {
                description: self.description,
                name: self.name,
                required: self.required,
                description_localizations: None,
                name_localizations: None,
            },
            self.help,
        )
    }

    /// Conversion into a [`ChannelCommandOptionData`]
    pub fn into_channel(self) -> (ChannelCommandOptionData, Option<String>) {
        (
            ChannelCommandOptionData {
                channel_types: self.data.channel_types,
                description: self.description,
                name: self.name,
                required: self.required,
                description_localizations: None,
                name_localizations: None,
            },
            self.help,
        )
    }

    /// Conversion into a [`ChoiceCommandOptionData`]
    pub fn into_choice(
        self,
        choices: Vec<CommandOptionChoice>,
    ) -> (ChoiceCommandOptionData, Option<String>) {
        (
            ChoiceCommandOptionData {
                autocomplete: self.autocomplete,
                choices,
                description: self.description,
                name: self.name,
                required: self.required,
                description_localizations: None,
                max_length: self.data.max_length,
                min_length: self.data.min_length,
                name_localizations: None,
            },
            self.help,
        )
    }

    /// Conversion into a [`NumberCommandOptionData`]
    pub fn into_number(
        self,
        choices: Vec<CommandOptionChoice>,
    ) -> (NumberCommandOptionData, Option<String>) {
        (
            NumberCommandOptionData {
                autocomplete: self.autocomplete,
                choices,
                description: self.description,
                max_value: self.data.max_value,
                min_value: self.data.min_value,
                name: self.name,
                required: self.required,
                description_localizations: None,
                name_localizations: None,
            },
            self.help,
        )
    }
}
